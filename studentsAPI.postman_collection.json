{
	"info": {
		"_postman_id": "1db40f6a-6b9f-4a7c-9dd6-a893c7721915",
		"name": "studentsAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31958616"
	},
	"item": [
		{
			"name": "GET Single Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"        pm.test(\"Status code is 200\",() =>\r",
							"        {\r",
							"            pm.response.to.have.status(200)\r",
							"        }\r",
							"               );\r",
							"\r",
							"       pm.test(\"Status code has String\",()=> \r",
							"       {\r",
							"        pm.response.to.have.status(\"OK\")\r",
							"       }\r",
							"              ); \r",
							"\r",
							"        pm.test(\"Content-Type hedaer is present\", ()=> \r",
							"        {\r",
							"        pm.response.to.have.header(\"Content-Type\")\r",
							"        }\r",
							"              );\r",
							"\r",
							"        pm.test(\"Content-Type header is application/json\", ()=>\r",
							"        {\r",
							"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"        }\r",
							"              );\r",
							"\r",
							"        // pm.test(\"Cookies language is present\", ()=>{\r",
							"        // pm.expect(pm.cookies.has('language')).to.be.true\r",
							"        // }\r",
							"        //       );\r",
							"\r",
							"        // pm.test(\"Cookies language has value 1\", ()=>{\r",
							"        // pm.expect(pm.cookies.get('language')).to.eql('en-gb');\r",
							"        // }\r",
							"        //       );\r",
							"\r",
							"        pm.test(\"VAlidate the response time is below 200\", ()=>{\r",
							"        pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"        });\r",
							"\r",
							"        const jsonData = pm.response.json();\r",
							"        pm.test(\"Test data type of response\",()=>{\r",
							"            pm.expect(jsonData).to.be.an(\"object\");\r",
							"            pm.expect(jsonData.name).to.be.a(\"String\");\r",
							"            pm.expect(jsonData.id).to.be.a(\"String\");\r",
							"            pm.expect(jsonData.courses).to.be.an(\"array\");\r",
							"        });\r",
							"        pm.test(\"Validate the contaent of array\", ()=>{\r",
							"            pm.expect(jsonData.courses).to.include(\"MBA\");\r",
							"        });\r",
							"// VAlidate the json schema\r",
							"        var schema = {\r",
							"     \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"      \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"name\": {\r",
							"          \"type\": \"String\"\r",
							"     },\r",
							"      \"location\": {\r",
							"       \"type\": \"string\"\r",
							"      },\r",
							"      \"phone\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"courses\": {\r",
							"        \"type\": \"array\",\r",
							"         \"items\": [\r",
							"          {\r",
							"           \"type\": \"string\"\r",
							"         },\r",
							"          {\r",
							"            \"type\": \"string\"\r",
							"           }\r",
							"         ]\r",
							"         }\r",
							"     },\r",
							"     \"required\": [\r",
							"        \"name\",\r",
							"     \"location\",\r",
							"      \"phone\",\r",
							"      \"courses\"\r",
							"      ]\r",
							"}\r",
							"\r",
							"\r",
							"        pm.test(\"schema validation\",()=>{\r",
							"\r",
							"             pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
							"        });"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Local_Url}}/students/2",
					"host": [
						"{{Local_Url}}"
					],
					"path": [
						"students",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET All Student Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"        pm.test(\"Status code is 200\",() =>\r",
							"        {\r",
							"            pm.response.to.have.status(200)\r",
							"        }\r",
							"               );\r",
							"\r",
							"       pm.test(\"Status code has String\",()=> \r",
							"       {\r",
							"        pm.response.to.have.status(\"OK\")\r",
							"       }\r",
							"              ); \r",
							"\r",
							"        pm.test(\"Content-Type hedaer is present\", ()=> \r",
							"        {\r",
							"        pm.response.to.have.header(\"Content-Type\")\r",
							"        }\r",
							"              );\r",
							"\r",
							"        pm.test(\"Content-Type header is application/json\", ()=>\r",
							"        {\r",
							"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"        }\r",
							"              );\r",
							"\r",
							"        // pm.test(\"Cookies language is present\", ()=>{\r",
							"        // pm.expect(pm.cookies.has('language')).to.be.true\r",
							"        // }\r",
							"        //       );\r",
							"\r",
							"        // pm.test(\"Cookies language has value 1\", ()=>{\r",
							"        // pm.expect(pm.cookies.get('language')).to.eql('en-gb');\r",
							"        // }\r",
							"        //       );\r",
							"\r",
							"        pm.test(\"VAlidate the response time is below 200\", ()=>{\r",
							"        pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"        });\r",
							"\r",
							"        const jsonData = pm.response.json();\r",
							"        pm.test(\"Test data type of response\",()=>{\r",
							"            pm.expect(jsonData).to.be.an(\"object\");\r",
							"            pm.expect(jsonData.name).to.be.a(\"String\");\r",
							"            pm.expect(jsonData.id).to.be.a(\"String\");\r",
							"            pm.expect(jsonData.courses).to.be.an(\"array\");\r",
							"        });\r",
							"        pm.test(\"Validate the contaent of array\", ()=>{\r",
							"            pm.expect(jsonData.courses).to.include(\"MBA\");\r",
							"        });\r",
							"// VAlidate the json schema\r",
							"        var schema = {\r",
							"     \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"      \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"name\": {\r",
							"          \"type\": \"String\"\r",
							"     },\r",
							"      \"location\": {\r",
							"       \"type\": \"string\"\r",
							"      },\r",
							"      \"phone\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"courses\": {\r",
							"        \"type\": \"array\",\r",
							"         \"items\": [\r",
							"          {\r",
							"           \"type\": \"string\"\r",
							"         },\r",
							"          {\r",
							"            \"type\": \"string\"\r",
							"           }\r",
							"         ]\r",
							"         }\r",
							"     },\r",
							"     \"required\": [\r",
							"        \"name\",\r",
							"     \"location\",\r",
							"      \"phone\",\r",
							"      \"courses\"\r",
							"      ]\r",
							"}\r",
							"\r",
							"\r",
							"        pm.test(\"schema validation\",()=>{\r",
							"\r",
							"             pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
							"        });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Local_Url}}/students",
					"host": [
						"{{Local_Url}}"
					],
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"        pm.test(\"Status code is 201\",() =>\r",
							"        {\r",
							"            pm.response.to.have.status(201)\r",
							"        }\r",
							"               );\r",
							"\r",
							"       pm.test(\"Status code has String\",()=> \r",
							"       {\r",
							"        pm.response.to.have.status(\"Created\")\r",
							"       }\r",
							"              ); \r",
							"\r",
							"        pm.test(\"Content-Type hedaer is present\", ()=> \r",
							"        {\r",
							"        pm.response.to.have.header(\"Content-Type\")\r",
							"        }\r",
							"              );\r",
							"\r",
							"        pm.test(\"Content-Type header is application/json\", ()=>\r",
							"        {\r",
							"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"        }\r",
							"              );\r",
							"\r",
							"        // pm.test(\"Cookies language is present\", ()=>{\r",
							"        // pm.expect(pm.cookies.has('language')).to.be.true\r",
							"        // }\r",
							"        //       );\r",
							"\r",
							"        // pm.test(\"Cookies language has value 1\", ()=>{\r",
							"        // pm.expect(pm.cookies.get('language')).to.eql('en-gb');\r",
							"        // }\r",
							"        //       );\r",
							"\r",
							"        pm.test(\"VAlidate the response time is below 200\", ()=>{\r",
							"        pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"        });\r",
							"\r",
							"        const jsonData = pm.response.json();\r",
							"        pm.test(\"Test data type of response\",()=>{\r",
							"            pm.expect(jsonData).to.be.an(\"object\");\r",
							"            pm.expect(jsonData.name).to.be.a(\"String\");\r",
							"            pm.expect(jsonData.id).to.be.a(\"String\");\r",
							"            pm.expect(jsonData.courses).to.be.an(\"array\");\r",
							"        });\r",
							"        pm.test(\"Validate the contaent of array\", ()=>{\r",
							"            pm.expect(jsonData.courses).to.include(\"MBA\");\r",
							"        });\r",
							"// VAlidate the json schema\r",
							"        var schema = {\r",
							"     \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"      \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"name\": {\r",
							"          \"type\": \"String\"\r",
							"     },\r",
							"      \"location\": {\r",
							"       \"type\": \"string\"\r",
							"      },\r",
							"      \"phone\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"courses\": {\r",
							"        \"type\": \"array\",\r",
							"         \"items\": [\r",
							"          {\r",
							"           \"type\": \"string\"\r",
							"         },\r",
							"          {\r",
							"            \"type\": \"string\"\r",
							"           }\r",
							"         ]\r",
							"         }\r",
							"     },\r",
							"     \"required\": [\r",
							"        \"name\",\r",
							"     \"location\",\r",
							"      \"phone\",\r",
							"      \"courses\"\r",
							"      ]\r",
							"}\r",
							"\r",
							"\r",
							"        pm.test(\"schema validation\",()=>{\r",
							"\r",
							"             pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
							"        });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "  {\r\n    \"name\": \"Akshay\",\r\n    \"location\": \"Bhingar\",\r\n    \"phone\": \"98665211\",\r\n    \"courses\": [\r\n      \"MBA\",\r\n      \"Sales\"\r\n    ]\r\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Local_Url}}/students",
					"host": [
						"{{Local_Url}}"
					],
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Student",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "  {\r\n    \"location\": \"Mumbai\"\r\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Local_Url}}/students/1",
					"host": [
						"{{Local_Url}}"
					],
					"path": [
						"students",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Student",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{Local_Url}}/students/_Cwei3K",
					"host": [
						"{{Local_Url}}"
					],
					"path": [
						"students",
						"_Cwei3K"
					]
				}
			},
			"response": []
		}
	]
}